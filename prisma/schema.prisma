// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//user, doctor, appointment models

//USER MODEL

model User{
  id          Int @id     @default(autoincrement())
  clerkId     String      @unique
  firstName   String
  lastName    String
  phoneNumber String?     @unique
  email       String      @unique
  
  // role       Role       @default(USER)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  appointments Appointment[] //array because user can have multiple appointments
  @@map("users") //see users as table name in db
}

model Doctor{
  id          Int         @id @default(autoincrement())
  clerkId     String      @unique
  firstName   String
  lastName    String
  phoneNumber String?     @unique
  email       String      @unique
  password    String
  specialization String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  gender      Gender
  isActive    Boolean     @default(true)
  isAcceptingNewPatients Boolean @default(true)
  appointments Appointment[] //array because doctor can have multiple appointments

  @@map("doctors")
  }

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Appointment{
  id          Int       @id @default(autoincrement())
  appointmentDate DateTime
  reason      String
  status      AppointmentStatus @default(SCHEDULED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  //Foreign Keys
  userId      Int
  doctorId    Int
  //Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor      Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("appointments")
}
enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}